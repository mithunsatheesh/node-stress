{"name":"Node-stress","tagline":"Node.js light weight module to apply specific load to a REST API and obtain the statitics","body":"# node-stress\r\n\r\nLight weight Node.js module to apply specified load on a REST API and retrieve the response statistics. I gives the counts of good,bad and errored responses along with the time  taken to process them all.\r\n\r\n\r\n## Installation\r\n\r\n    npm install node-stress\r\n\r\n\r\n## Usage\r\n\r\n``` js\r\nvar stress = require(\"./node-stress\");\r\n\r\nstress({\r\n\t\t\t\r\n\t\thost: url, //strip off the starting http:// same as in case of node http request\r\n\t\tport: port,\r\n\t\tpath: path\r\n\t\t\r\n\t\t\r\n\t},RequestCount,callback);\r\n```\r\n\r\n## Example\r\n\r\n``` js\r\nvar stress = require(\"./node-stress\");\r\n\r\nstress({\r\n\t\t\t\r\n\t\thost: 'rest.api.url',\r\n\t\tport: 80,\r\n\t\tpath: '/getData.php?command=1'\r\n\t\t\r\n\t\t\r\n\t},RequestCount,function(data){\r\n\t\t\r\n\t\tconsole.log(\"Requests Sent : \"+data.ReqStarted);\r\n\t\t\r\n\t\tif(data.response.GoodResponse)\r\n\t\t\tconsole.log(\"Good Response (200 OK) : \", data.response.GoodResponse);\r\n\t\t\t\r\n\t\tif(data.response.BadResponse)\r\n\t\t\tconsole.log(\"Bad Response : \", data.response.BadResponse);\r\n\t\t\t\r\n\t\tif(data.response.ErrorResponse) {\r\n\t\t\tconsole.log(\"Error Response : \", data.response.ErrorResponse);\r\n\t\t\tconsole.log(JSON.stringify(data.response.ErrorList,undefined,4));\r\n\t\t}\r\n\t\tconsole.log(\"Test Stats : \"+data.fact);\r\n\r\n});\r\n```\r\n\r\n## Parameters\r\n\r\n`host` - the url of the REST API after stripping down the starting http://. For more info check the input parameter for the node sample [http request](http://nodejs.org/api/http.html#http_http_request_options_callback).\r\n\r\n`port` - port at which the REST API runs\r\n\r\n`path` - path to the page we are sending request\r\n\r\n`RequestCount` - the load to be applied in number (eg:1000)\r\n\r\n\r\n## Credits\r\n\r\nThe code used is inspired and based on [this article](https://hacks.mozilla.org/2013/01/building-a-node-js-server-that-wont-melt-a-node-js-holiday-season-part-5/) on [hacks.mozilla.org](https://hacks.mozilla.org/).\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}